//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JohnJesus.WcfAsync.Munger
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MungerFault", Namespace="http://schemas.datacontract.org/2004/07/JohnJesus.WcfAsync.Munger")]
    public partial class MungerFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IMungerContract")]
public interface IMungerContract
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMungerContract/Divide", ReplyAction="http://tempuri.org/IMungerContract/DivideResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(JohnJesus.WcfAsync.Munger.MungerFault), Action="http://tempuri.org/IMungerContract/DivideMungerFaultFault", Name="MungerFault", Namespace="http://schemas.datacontract.org/2004/07/JohnJesus.WcfAsync.Munger")]
    uint Divide(uint numerator, uint denominator);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMungerContract/Divide", ReplyAction="http://tempuri.org/IMungerContract/DivideResponse")]
    System.IAsyncResult BeginDivide(uint numerator, uint denominator, System.AsyncCallback callback, object asyncState);
    
    uint EndDivide(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMungerContractChannel : IMungerContract, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class DivideCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public DivideCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public uint Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((uint)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MungerContractClient : System.ServiceModel.ClientBase<IMungerContract>, IMungerContract
{
    
    private BeginOperationDelegate onBeginDivideDelegate;
    
    private EndOperationDelegate onEndDivideDelegate;
    
    private System.Threading.SendOrPostCallback onDivideCompletedDelegate;
    
    public MungerContractClient()
    {
    }
    
    public MungerContractClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MungerContractClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MungerContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MungerContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public event System.EventHandler<DivideCompletedEventArgs> DivideCompleted;
    
    public uint Divide(uint numerator, uint denominator)
    {
        return base.Channel.Divide(numerator, denominator);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginDivide(uint numerator, uint denominator, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginDivide(numerator, denominator, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public uint EndDivide(System.IAsyncResult result)
    {
        return base.Channel.EndDivide(result);
    }
    
    private System.IAsyncResult OnBeginDivide(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        uint numerator = ((uint)(inValues[0]));
        uint denominator = ((uint)(inValues[1]));
        return this.BeginDivide(numerator, denominator, callback, asyncState);
    }
    
    private object[] OnEndDivide(System.IAsyncResult result)
    {
        uint retVal = this.EndDivide(result);
        return new object[] {
                retVal};
    }
    
    private void OnDivideCompleted(object state)
    {
        if ((this.DivideCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.DivideCompleted(this, new DivideCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void DivideAsync(uint numerator, uint denominator)
    {
        this.DivideAsync(numerator, denominator, null);
    }
    
    public void DivideAsync(uint numerator, uint denominator, object userState)
    {
        if ((this.onBeginDivideDelegate == null))
        {
            this.onBeginDivideDelegate = new BeginOperationDelegate(this.OnBeginDivide);
        }
        if ((this.onEndDivideDelegate == null))
        {
            this.onEndDivideDelegate = new EndOperationDelegate(this.OnEndDivide);
        }
        if ((this.onDivideCompletedDelegate == null))
        {
            this.onDivideCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDivideCompleted);
        }
        base.InvokeAsync(this.onBeginDivideDelegate, new object[] {
                    numerator,
                    denominator}, this.onEndDivideDelegate, this.onDivideCompletedDelegate, userState);
    }
}
